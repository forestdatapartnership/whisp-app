name: Deploy to Cloud Run

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (leave empty to use current branch)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref_name, 'release/') && 'production' || 'development' }}
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract environment and version
        id: extract
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "version=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == release/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            version=$(echo "${{ github.ref_name }}" | sed 's/release\/v//')
            echo "version=${version}" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            # Use branch name as version, replacing / with - for valid Docker tags
            version=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            echo "version=${version}" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_ID_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ vars.REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }}:${{ steps.extract.outputs.version }} .

      - name: Push Docker image
        run: |
          docker push ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }}:${{ steps.extract.outputs.version }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.SERVICE }} \
            --image ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }}:${{ steps.extract.outputs.version }} \
            --region ${{ vars.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --timeout 300 \
            --tag ${{ steps.extract.outputs.version }} \
            --no-traffic \
            --add-cloudsql-instances fao-fdp-review:europe-west1:whisp-db-dev \
            --clear-secrets
            
      - name: Get service URL and update with environment variables
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ vars.SERVICE }} --region ${{ vars.REGION }} --format="value(status.url)")
          gcloud run services update ${{ vars.SERVICE }} \
            --region ${{ vars.REGION }} \
            --set-env-vars "HOST_URL=${SERVICE_URL},NEXT_PUBLIC_WHISP_URL=${SERVICE_URL}" \
            --update-secrets "/app/secrets/environment/.env.local=whisp-app-env-${{ steps.extract.outputs.environment }}:latest,/app/secrets/gee/credentials.json=gee-credentials:latest"

            
      - name: Clean up untagged images
        run: |
          gcloud artifacts docker images list ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }} \
            --include-tags --filter="-tags:*" \
            --format="value[separator='@'](IMAGE,DIGEST)" | \
            xargs -I {} gcloud artifacts docker images delete "{}" --quiet --async || true 