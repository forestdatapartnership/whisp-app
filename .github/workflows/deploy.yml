name: Deploy to Cloud Run

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (leave empty to use current branch)'
        required: false
        default: ''
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=$(echo "${VERSION}" | tr '.' '-')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_version=v${TAG_VERSION}" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_ID_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}

      - name: Verify image exists
        run: |
          echo "Checking if image exists: ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }}:${{ steps.package_version.outputs.version }}"
          gcloud artifacts docker images describe ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }}:${{ steps.package_version.outputs.version }} || {
            echo "‚ùå Image not found! Make sure you've built version ${{ steps.package_version.outputs.version }} from main branch first."
            exit 1
          }

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.SERVICE }} \
            --image ${{ vars.REGISTRY }}/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.IMAGE }}:${{ steps.package_version.outputs.version }} \
            --region ${{ vars.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --timeout 300 \
            --no-traffic \
            --add-cloudsql-instances ${{ vars.CLOUDSQL_INSTANCE }} \
            --clear-secrets
            
      - name: Get service URL and update with environment variables
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ vars.SERVICE }} --region ${{ vars.REGION }} --format="value(status.url)")
          gcloud run services update ${{ vars.SERVICE }} \
            --region ${{ vars.REGION }} \
            --tag "${{ steps.package_version.outputs.tag_version }}" \
            --set-env-vars "HOST_URL=${SERVICE_URL},NEXT_PUBLIC_WHISP_URL=${SERVICE_URL}" \
            --update-secrets "/app/secrets/environment/.env.local=${{ vars.ENV_SECRET_NAME }}:latest,/app/secrets/gee/credentials.json=gee-credentials:latest"

      - name: Route traffic to new revision
        run: |
          gcloud run services update-traffic ${{ vars.SERVICE }} \
            --region ${{ vars.REGION }} \
            --to-tags "${{ steps.package_version.outputs.tag_version }}=100"
